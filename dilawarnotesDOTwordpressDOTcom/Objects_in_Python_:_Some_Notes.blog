<TYPE>post</TYPE>
<STATUS>publish</STATUS>
<ID>435</ID>
<TITLE>
Objects in Python : Some Notes
</TITLE>

<CONTENT>
<ol id="internal-source-marker_0.24885956355393746">
	<li>Objects are ‘data abstraction’ in Python. It is imperative to understand how objects are related to each other when one use them to represent data.</li>
	<li>Every object has three ‘attributes’, identity, type and value.</li>
	<li>Identity of an object can NOT be changed once object is created. Method id() returns identity of a Python object. At this point, memory location of the object is identity of the object.</li>
	<li>‘Type’ of an object is also unchangeable.  ‘type’ tells what are the operations this object supports e.g. does it has a length? Function type() returns the type of object which in itself an object.</li>
	<li>Value of an object can be changed. When one can change value of an object, it is called mutable otherwise the object is called immutable. In pure functional programming languages such as Haskell, variables are immutable i.e. you can not change their values once created.
<ul>
	<li>The value of an immutable container object that  contains a reference to a mutable object can change when later value is changed but the container is still considered immutable. Immutability is somewhat more subtle than having the property of unchangeable values.</li>
	<li>Immutability is also dependent on type of the object. For instant number, strings and tuple are immutable but dictionary and list are not.</li>
</ul>
</li>
	<li>Objects are never explicitly destroyed. When they become unusable they are <a href="http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29">garbage-collected.</a></li>
</ol>

</CONTENT>

<POST_TAG ID="87">Objects in Python</POST_TAG>

<CATEGORY ID="11">Programming</CATEGORY>

<CATEGORY ID="86">Python</CATEGORY>
